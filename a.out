
*** INICIO ***

  0:     LD  6,0(0) 	* load maxaddress from location 0
  1:     ST  0,0(0) 	* clear location 0

*** Processo de atribuicao ***


*** LOAD CONSTANTE ***

  2:    LDC  0,5(0) 	* carrega NUM em reg

*** STORE ***

  3:     ST  0,1(5) 	* carrega endereco de memoria valor de gp em reg

*** Fim de atribuicao ***


*** Processo de atribuicao ***


*** LOAD CONSTANTE ***

  4:    LDC  0,1(0) 	* carrega NUM em reg

*** STORE ***

  5:     ST  0,2(5) 	* carrega endereco de memoria valor de gp em reg

*** Fim de atribuicao ***


*** Processo de relacao < ***


*** LOAD CONSTANTE ***

  6:    LDC  0,1(0) 	* carrega NUM em reg

*** STORE TEMPORARIO ***

  7:     ST  0,0(6) 	* carrega endereco de memoria valor de mp em reg

*** LOAD CONSTANTE ***

  8:    LDC  0,2(0) 	* carrega NUM em reg

*** STORE TEMPORARIO ***

  9:     ST  0,-1(6) 	* carrega endereco de memoria valor de mp em reg

*** PASSA VALOR PARA AC0 E AC1 ***

 10:     LD  0,-1(6) 	* carrega em ac o que tem no endereco de memoria valor de mp
 11:     LD  1,0(6) 	* carrega em ac1 o que tem no endereco de memoria valor de mp

*** RELACAO: MENOR ***

 12:    SUB  0,1,0 	* 
 13:    JLT  0,4(7) 	* a - b < 0 ? Se sim, pule para armazenar true

*** STORE RESULTADO DA RELACAO ***

 14:    LDC  0,0(0) 	* false
 15:     ST  0,0(6) 	* armazena false no topo
 16:    LDC  0,0(0) 	* 
 17:    JEQ  0,2(7) 	* Pula para o if
 18:    LDC  0,1(0) 	* true
 19:     ST  0,0(6) 	* armazena true no topo

*** Fim de < ***


*** Processo de atribuicao ***


*** LOAD CONSTANTE ***

 22:    LDC  0,-5(0) 	* carrega NUM em reg

*** STORE ***

 23:     ST  0,1(5) 	* carrega endereco de memoria valor de gp em reg

*** Fim de atribuicao ***


*** JUMP se o valor da relacao for false ***

 20:     LD  0,0(6) 	* 
 21:    JEQ  0,2(7) 	* Pula para o else

*** LOAD ***

 24:     LD  0,1(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** WRITE ***

 25:    OUT  0,0,0 	* write ac

*** Processo de multiplicacao ***


*** LOAD ***

 26:     LD  0,1(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** STORE TEMPORARIO ***

 27:     ST  0,0(6) 	* carrega endereco de memoria valor de mp em reg

*** LOAD ***

 28:     LD  0,1(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** STORE TEMPORARIO ***

 29:     ST  0,-1(6) 	* carrega endereco de memoria valor de mp em reg

*** PASSA VALOR PARA AC0 E AC1 ***

 30:     LD  0,-1(6) 	* carrega em ac o que tem no endereco de memoria valor de mp
 31:     LD  1,0(6) 	* carrega em ac1 o que tem no endereco de memoria valor de mp

*** MULTIPLICACAO ***

 32:    MUL  0,1,0 	* ac = ac1 * ac
 33:     ST  0,0(6) 	* armazena valor da multiplicacao na memoria mp

*** Fim de multiplicacao ***


*** LOAD O QUE ESTA NO TOPO DA PILHA DOS TEMPORARIOS ***

 34:     LD  0,0(6) 	* carrega para reg o que tem no endereco de memoria valor que esta no mp

*** WRITE ***

 35:    OUT  0,0,0 	* write ac

*** FIM ***

 36:   HALT  0,0,0 	* 
