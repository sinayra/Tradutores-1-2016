
*** INICIO ***

  0:     LD  6,0(0) 	* load maxaddress from location 0
  1:     ST  0,0(0) 	* clear location 0

*** READ ***

  2:     IN  0,0,0 	* le valor para o registrador
  3:     ST  0,2(5) 	* armazena valor de reg para endereco de memoria valor de gp

*** Processo de adicao ***


*** LOAD ***

  4:     LD  0,2(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** STORE TEMPORARIO ***

  5:     ST  0,0(6) 	* carrega endereco de memoria valor de mp em reg

*** LOAD CONSTANTE ***

  6:    LDC  0,3(0) 	* carrega NUM em reg

*** STORE TEMPORARIO ***

  7:     ST  0,-1(6) 	* carrega endereco de memoria valor de mp em reg

*** PASSA VALOR PARA AC0 E AC1 ***

  8:     LD  0,-1(6) 	* carrega em ac o que tem no endereco de memoria valor de mp
  9:     LD  1,0(6) 	* carrega em ac1 o que tem no endereco de memoria valor de mp

*** ADICAO ***

 10:    ADD  0,1,0 	* ac = ac1 + ac
 11:     ST  0,0(6) 	* armazena valor da soma na memoria mp

*** Fim de adicao ***


*** LOAD O QUE ESTA NO TOPO DA PILHA DOS TEMPORARIOS ***

 12:     LD  0,0(6) 	* carrega para reg o que tem no endereco de memoria valor que esta no mp

*** WRITE ***

 13:    OUT  0,0,0 	* write ac

*** Processo de adicao ***


*** LOAD ***

 14:     LD  0,2(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** STORE TEMPORARIO ***

 15:     ST  0,0(6) 	* carrega endereco de memoria valor de mp em reg

*** LOAD CONSTANTE ***

 16:    LDC  0,2(0) 	* carrega NUM em reg

*** STORE TEMPORARIO ***

 17:     ST  0,-1(6) 	* carrega endereco de memoria valor de mp em reg

*** PASSA VALOR PARA AC0 E AC1 ***

 18:     LD  0,-1(6) 	* carrega em ac o que tem no endereco de memoria valor de mp
 19:     LD  1,0(6) 	* carrega em ac1 o que tem no endereco de memoria valor de mp

*** ADICAO ***

 20:    ADD  0,1,0 	* ac = ac1 + ac
 21:     ST  0,0(6) 	* armazena valor da soma na memoria mp

*** Fim de adicao ***


*** Processo de atribuicao ***


*** LOAD O QUE ESTA NO TOPO DA PILHA DOS TEMPORARIOS ***

 22:     LD  0,0(6) 	* carrega para reg o que tem no endereco de memoria valor que esta no mp

*** STORE ***

 23:     ST  0,1(5) 	* carrega endereco de memoria valor de gp em reg

*** Fim de atribuicao ***


*** LOAD ***

 24:     LD  0,1(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** WRITE ***

 25:    OUT  0,0,0 	* write ac

*** Processo de adicao ***


*** LOAD ***

 26:     LD  0,1(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** STORE TEMPORARIO ***

 27:     ST  0,0(6) 	* carrega endereco de memoria valor de mp em reg

*** LOAD CONSTANTE ***

 28:    LDC  0,4(0) 	* carrega NUM em reg

*** STORE TEMPORARIO ***

 29:     ST  0,-1(6) 	* carrega endereco de memoria valor de mp em reg

*** PASSA VALOR PARA AC0 E AC1 ***

 30:     LD  0,-1(6) 	* carrega em ac o que tem no endereco de memoria valor de mp
 31:     LD  1,0(6) 	* carrega em ac1 o que tem no endereco de memoria valor de mp

*** ADICAO ***

 32:    ADD  0,1,0 	* ac = ac1 + ac
 33:     ST  0,0(6) 	* armazena valor da soma na memoria mp

*** Fim de adicao ***


*** LOAD O QUE ESTA NO TOPO DA PILHA DOS TEMPORARIOS ***

 34:     LD  0,0(6) 	* carrega para reg o que tem no endereco de memoria valor que esta no mp

*** WRITE ***

 35:    OUT  0,0,0 	* write ac

*** LOAD CONSTANTE ***

 36:    LDC  0,9(0) 	* carrega NUM em reg

*** WRITE ***

 37:    OUT  0,0,0 	* write ac

*** FIM ***

 38:   HALT  0,0,0 	* 
