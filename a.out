
*** INICIO ***

  0:     LD  6,0(0) 	* load maxaddress from location 0
  1:     ST  0,0(0) 	* clear location 0

*** READ ***

  2:     IN  0,0,0 	* le valor para o registrador
  3:     ST  0,2(5) 	* armazena na memoria index o valor de reg

*** READ ***

  4:     IN  0,0,0 	* le valor para o registrador
  5:     ST  0,1(5) 	* armazena na memoria index o valor de reg

*** Processo de relacao <> ***


*** LOAD ***

  6:     LD  0,2(5) 	* carrega posicao de memoria index em reg

*** STORE TEMPORARIO ***

  7:     ST  0,0(6) 	* carrega em mp

*** LOAD CONSTANTE ***

  8:    LDC  0,10(0) 	* carrega NUM em reg

*** STORE TEMPORARIO ***

  9:     ST  0,-1(6) 	* carrega em mp

*** PASSA VALOR PARA AC0 E AC1 ***

 10:     LD  0,-1(6) 	* carrega posicao de memoria index em reg
 11:     LD  1,0(6) 	* passa valor do topo da pilha para ac1

*** RELACAO: DIFERENTE ***

 12:    SUB  0,1,0 	* op - entre ac e ac1
 13:    JNE  0,4(7) 	* a - b != 0 ? Se sim, pule para armazenar true

*** STORE RESULTADO DA RELACAO ***

 14:    LDC  0,0(0) 	* false
 15:     ST  0,0(6) 	* armazena false no topo
 16:    LDC  0,0(0) 	* 
 17:    JEQ  0,2(7) 	* Pula para o if
 18:    LDC  0,1(0) 	* true
 19:     ST  0,0(6) 	* armazena true no topo

*** Fim de <> ***


*** LOAD ***

 22:     LD  0,1(5) 	* carrega posicao de memoria index em reg

*** WRITE ***

 23:     LD  0,1(5) 	* carrega posicao de memoria index em reg
 24:    OUT  0,0,0 	* write ac

*** JUMP se o valor da relacao for false ***

 20:     LD  0,0(6) 	* 
 21:    JEQ  0,3(7) 	* Pula para o else

*** LOAD ***

 25:     LD  0,2(5) 	* carrega posicao de memoria index em reg

*** WRITE ***

 26:     LD  0,2(5) 	* carrega posicao de memoria index em reg
 27:    OUT  0,0,0 	* write ac

*** FIM ***

 28:   HALT  0,0,0 	* 
