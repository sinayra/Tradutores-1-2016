
*** INICIO ***

  0:     LD  6,0(0) 	* load maxaddress from location 0
  1:     ST  0,0(0) 	* clear location 0

*** READ ***

  2:     IN  0,0,0 	* le valor para o registrador
  3:     ST  0,3(5) 	* armazena valor de reg para endereco de memoria valor de gp

*** READ ***

  4:     IN  0,0,0 	* le valor para o registrador
  5:     ST  0,2(5) 	* armazena valor de reg para endereco de memoria valor de gp

*** READ ***

  6:     IN  0,0,0 	* le valor para o registrador
  7:     ST  0,1(5) 	* armazena valor de reg para endereco de memoria valor de gp

*** Processo de relacao < ***


*** LOAD ***

  8:     LD  0,3(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** STORE TEMPORARIO ***

  9:     ST  0,0(6) 	* carrega endereco de memoria valor de mp em reg

*** LOAD CONSTANTE ***

 10:    LDC  0,10(0) 	* carrega NUM em reg

*** STORE TEMPORARIO ***

 11:     ST  0,-1(6) 	* carrega endereco de memoria valor de mp em reg

*** PASSA VALOR PARA AC0 E AC1 ***

 12:     LD  0,-1(6) 	* carrega em ac o que tem no endereco de memoria valor de mp
 13:     LD  1,0(6) 	* carrega em ac1 o que tem no endereco de memoria valor de mp

*** RELACAO: MENOR ***

 14:    SUB  0,1,0 	* 
 15:    JLT  0,4(7) 	* a - b < 0 ? Se sim, pule para armazenar true

*** STORE RESULTADO DA RELACAO ***

 16:    LDC  0,0(0) 	* false
 17:     ST  0,0(6) 	* armazena false no topo
 18:    LDC  0,0(0) 	* 
 19:    JEQ  0,2(7) 	* Pula para o if
 20:    LDC  0,1(0) 	* true
 21:     ST  0,0(6) 	* armazena true no topo

*** Fim de < ***


*** Processo de relacao < ***


*** LOAD ***

 24:     LD  0,2(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** STORE TEMPORARIO ***

 25:     ST  0,-1(6) 	* carrega endereco de memoria valor de mp em reg

*** LOAD CONSTANTE ***

 26:    LDC  0,10(0) 	* carrega NUM em reg

*** STORE TEMPORARIO ***

 27:     ST  0,-2(6) 	* carrega endereco de memoria valor de mp em reg

*** PASSA VALOR PARA AC0 E AC1 ***

 28:     LD  0,-2(6) 	* carrega em ac o que tem no endereco de memoria valor de mp
 29:     LD  1,-1(6) 	* carrega em ac1 o que tem no endereco de memoria valor de mp

*** RELACAO: MENOR ***

 30:    SUB  0,1,0 	* 
 31:    JLT  0,4(7) 	* a - b < 0 ? Se sim, pule para armazenar true

*** STORE RESULTADO DA RELACAO ***

 32:    LDC  0,0(0) 	* false
 33:     ST  0,-1(6) 	* armazena false no topo
 34:    LDC  0,0(0) 	* 
 35:    JEQ  0,2(7) 	* Pula para o if
 36:    LDC  0,1(0) 	* true
 37:     ST  0,-1(6) 	* armazena true no topo

*** Fim de < ***


*** LOAD ***

 40:     LD  0,1(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** WRITE ***

 41:    OUT  0,0,0 	* write ac

*** JUMP se o valor da relacao for false ***

 38:     LD  0,-1(6) 	* 
 39:    JEQ  0,2(7) 	* Pula para o else

*** JUMP se o valor da relacao for false ***

 22:     LD  0,0(6) 	* 
 23:    JEQ  0,18(7) 	* Pula para o else

*** Processo de atribuicao ***


*** LOAD CONSTANTE ***

 42:    LDC  0,10(0) 	* carrega NUM em reg

*** STORE ***

 43:     ST  0,3(5) 	* carrega endereco de memoria valor de gp em reg

*** Fim de atribuicao ***


*** LOAD ***

 44:     LD  0,3(5) 	* carrega para reg o que tem no endereco de memoria valor que esta no gp

*** WRITE ***

 45:    OUT  0,0,0 	* write ac

*** FIM ***

 46:   HALT  0,0,0 	* 
