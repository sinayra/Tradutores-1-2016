
************ INICIO ************

  0:     LD  6,0(0)   * load maxaddress from location 0
  1:     ST  0,0(0)   * clear location 0

************ LOAD CONSTANTE ************

  2:    LDC  0,5(0)   * carrega NUM em reg

************ STORE TEMPORARIO ************

  3:     ST  0,0(6)   * carrega em mp

************ STORE ************

  4:     ST  0,2(5)   * carrega em gp

************ LOAD CONSTANTE ************

  5:    LDC  0,20(0)  * carrega NUM em reg

************ STORE TEMPORARIO ************

  6:     ST  0,0(6)   * carrega em mp

************ STORE ************

  7:     ST  0,1(5)   * carrega em gp

************ LOAD ************

  8:     LD  0,2(5)   * carrega posicao de memoria index em reg

************ STORE TEMPORARIO ************

  9:     ST  0,0(6)   * carrega em mp

************ LOAD CONSTANTE ************

 10:    LDC  0,10(0)  * carrega NUM em reg

************ STORE TEMPORARIO ************

 11:     ST  0,-1(6)  * carrega em mp

************ PASSA VALOR PARA AC0 E AC1 ************

 12:     LD  0,-1(6)  * carrega posicao de memoria index em reg
 13:     LD  1,0(6)   * passa valor do topo da pilha para ac1

************ RELACAO: MENOR ************

 14:    SUB  0,1,0  * op - entre ac e ac1
 15:    JLT  0,4(7)   * a - b < 0 ? Se sim, pule para armazenar true

************ STORE RESULTADO DA RELACAO ************

 16:    LDC  0,0(0)   * false
 17:     ST  0,0(6)   * armazena false no topo
 18:    LDC  0,0(0)   * 
 19:    JEQ  0,2(7)   * Pula para o if
 20:    LDC  0,1(0)   * true
 21:     ST  0,0(6)   * armazena true no topo

 ************ JUMP se o valor da relacao for false ************

 22:     LD  0,0(6)   * 
 23:    JEQ  0,3(7)   * Pula para o else

************ LOAD ************

 24:     LD  0,2(5)   * carrega posicao de memoria index em reg

************ WRITE ************

 25:     LD  0,2(5)   * carrega posicao de memoria index em reg
 26:    OUT  0,0,0  * write ac

  ************ JUMP se o valor da relacao for false ************

 18:    LDC  0,0(0)   * 
 19:    JEQ  0,3(7)   * Pula para o fim

 ************ LOAD ************

 29:     LD  0,1(5)   * carrega posicao de memoria index em reg

************ WRITE ************

 30:     LD  0,1(5)   * carrega posicao de memoria index em reg
 31:    OUT  0,0,0  * write ac



************ FIM ************

 32:   HALT  0,0,0  * 
